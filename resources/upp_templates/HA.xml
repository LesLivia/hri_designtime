<template>
	<name>Human_Assistant</name>
	<parameter>int id, int v, int p_f, int p_fw, int p_dext</parameter>
	<declaration>/* general comments
- if the person is far from the objective, it will move towards it, otherwise it will wait for the command to sincronyze and start executing. 
- functions for moving the humans are the same of human leader, they can be globally packaged maybe?
*/
clock t, F, Fp;
clock tUpd;
clock freeWill;
clock tWH;

double lambda, mi;
double passout_th = 1.0;

//Free Will Model
double freeWillTh = 100.0;
double freeWillRange = 95.0;
int obey = 90;
int disobey = 10;

int Tpoll = 1;

//this sets the state of the mission: getting to objective or working at mission
bool exeMission = false;
//threshHold for completing the mission
double tWHTh = 60.0;



bool checkDist() {
    return pt_dist(internalHumX[id-1],destX[id-1],internalHumY[id-1],destY[id-1])&lt;= 50.0;
}

void initHuman() {
    F = 0; 
    Fp = 0;
    t = 0;
    tWH = 0;
    
    tUpd = 0;
    humanPositionX[id-1] = 2000.0;
    humanPositionY[id-1] = 300.0;

    internalHumX[id-1] = humanPositionX[id-1];
    internalHumY[id-1] = humanPositionY[id-1];

    // unfortunately the switch case is not supported yet
    if(p_f==1) {
        lambda = YOUNG_HEALTHY[0]; mi = YOUNG_HEALTHY[1];
    } else if(p_f==2) {
        lambda = random_normal(YOUNG_SICK[0], YOUNG_SICK_SIGMA[0]); 
        mi = random_normal(YOUNG_SICK[1], YOUNG_SICK_SIGMA[1]);
    } else if(p_f==3) {
        lambda = random_normal(ELDERLY_HEALTHY[0], ELDERLY_HEALTHY_SIGMA[0]); 
        mi = random_normal(ELDERLY_HEALTHY[1], ELDERLY_HEALTHY_SIGMA[1]);
    } else if(p_f==4) {
        lambda = ELDERLY_SICK[0]; mi = ELDERLY_SICK[1];
    } else if(p_f==5) {
        lambda = COVID_PATIENT[0]; mi = COVID_PATIENT[1];
    } else {
        lambda = 0.005; mi = 0.005; //default values
    }

    if(p_fw==1) {
       freeWillTh = GROWN_UP;
    } else if(p_fw == 2) {
       freeWillTh = CHILD_LIKE;
    } else if(p_fw == 3) {
       freeWillTh = WHATEVER;
    }
    exeMission = checkDist();
}

void updateF(double coeff, bool walking) {
    if(walking) {
        internalFatigue[id-1] = 1-(1-internalFatigue[id-1])*exp(coeff*Tpoll); 
    } else {
        internalFatigue[id-1] = internalFatigue[id-1]*exp(coeff*Tpoll);
    }

    internalFatigue[id-1] = fmax(0, internalFatigue[id-1]);
}

trajectory traj = {{0.0, 0.0},
                   {0.0, 0.0},
                   {0.0, 0.0},
                   {0.0, 0.0}};
double ort = 0.0;
int curr_traj = 0;

void change_orientation(double sx, double sy, double dx, double dy) {
    double cos_alpha, alpha, theta, delta;
    double AC, AB;
    bool turnLeft, needsTurning = false;

    AC = pt_dist(sx, dx, sy, sy);
    AB = pt_dist(sx, dx, sy, dy);

    if (AB == 0)
    {
        return;
    }

    cos_alpha = AC / AB;
    // angle between destination and hor. line
    alpha = acos(cos_alpha);
    // angle between robot axis and hor. line
    theta = ort * 180 / PI;
    // how much the robot should rotate [deg]
    delta = 0.0;
    turnLeft = false;

    if (dx &gt;= sx &amp;&amp; dy &gt;= sy)
    { // Destination in 1st quadrant
        alpha = alpha * (180 / PI);
        if (alpha &gt; theta)
        {
            delta = alpha - theta;
            turnLeft = true;
        }
        else
        {
            delta = theta - alpha;
            turnLeft = false;
        }
    }
    else if (dx &gt;= sx &amp;&amp; dy &lt;= sy)
    { // Destination in 2nd quadrant
        alpha = -alpha * (180 / PI);
        if (theta &lt; alpha)
        {
            delta = alpha - theta;
            turnLeft = true;
        }
        else
        {
            delta = theta - alpha;
            turnLeft = false;
        }
    }
    else if (dx &lt;= sx &amp;&amp; dy &lt;= sy)
    { // Destination in 3rd quadrant
        alpha = -(180 - alpha * (180 / PI));
        if (theta &lt; alpha)
        {
            delta = alpha - theta;
            turnLeft = true;
        }
        else
        {
            delta = theta - alpha;
            turnLeft = false;
        }
    }
    else if (dx &lt;= sx &amp;&amp; dy &gt;= sy)
    { // Destination in 4th quadrant
        alpha = 180 - alpha * (180 / PI);
        if (theta &lt; alpha)
        {
            delta = alpha - theta;
            turnLeft = true;
        }
        else
        {
            delta = theta - alpha;
            turnLeft = false;
        }
    }

    needsTurning = delta &gt; 0.0;

    if (needsTurning &amp;&amp; turnLeft)
    {
        ort = ort * 180 / PI + delta;
    }
    else if (needsTurning &amp;&amp; !turnLeft)
    {
        ort = ort * 180 / PI - delta;
    }
}

point curr, dest;
void plan_traj() {
    int i, j, next_inters = -1;
    int neigh[3] = {-1, -1, -1}, k = 0;
    double dist, min_dist;
    bool visited[N_I] = {false, false, false, false, false};
    curr[0] = internalHumX[id-1]; curr[1] = internalHumY[id-1];
    // leader plans trajectory to destination
    dest[0] = destX[id-1]; dest[1] = destY[id-1];
    // init trajectory
    for (i = 0; i &lt; N_P; i++)
    {
        traj[i][0] = 0.0;
        traj[i][1] = 0.0;
    }
    i = 0;
    curr_traj = 0;
    
    // builds trajectory by finding a path among adjacent areas
    // (the existence of an intersection point means two areas are adjacent to each other)
    // until the destination area is reached
    while (!same_area(curr[0], curr[1], dest[0], dest[1]))
    {
        for (j = 0; j &lt; N_I; j++)
        {
            // find all int. pts which are a neighbor of curr. point
            // there are max. 3 in the long left hall
            if (same_area(curr[0], curr[1], INTERSECTIONS[j][0], INTERSECTIONS[j][1]) &amp;&amp; !visited[j])
            {
                neigh[k] = j;
                k++;
            }
        }
        // next int. point to add to traj. is the closest to destination
        min_dist = pt_dist(INTERSECTIONS[neigh[0]][0], dest[0], INTERSECTIONS[neigh[0]][1], dest[1]);
        next_inters = neigh[0];
        for (j = 1; j &lt; 3 &amp;&amp; neigh[j] != -1; j++)
        {
            dist = pt_dist(INTERSECTIONS[neigh[j]][0], dest[0], INTERSECTIONS[neigh[j]][1], dest[1]);
            if (dist &lt; min_dist)
            {
                min_dist = dist;
                next_inters = neigh[j];
            }
        }
        // if trajectory is full, or no next point has been found,
        // something has gone wrong, but I cannot raise an exception
        if (i == N_P - 1 || next_inters == -1)
            return;
        // next inters point is set as visited,
        visited[next_inters] = true;
        // added to the trajectory,
        traj[i][0] = INTERSECTIONS[next_inters][0];
        traj[i][1] = INTERSECTIONS[next_inters][1];
        i++;
        // and set as current point
        curr[0] = INTERSECTIONS[next_inters][0];
        curr[1] = INTERSECTIONS[next_inters][1];
        // reset
        next_inters = -1;
        k = 0;
        neigh[0] = -1;
        neigh[1] = -1;
        neigh[2] = -1;
    }
    // destination point is always part of the trajectory
    traj[i][0] = dest[0];
    traj[i][1] = dest[1];

    //sets initial orientation
    change_orientation(internalHumX[id-1], internalHumY[id-1], traj[0][0], traj[0][1]);
}

void updateP() {
    double eps = 0.0;
    exeMission = checkDist();
    if (exeMission) return;

    if (curr_traj &gt;= N_P || (traj[curr_traj][0]==0.0 &amp;&amp; traj[curr_traj][1]==0.0))
        return;

    if (pt_dist(internalHumX[id-1], traj[curr_traj][0], internalHumY[id-1], traj[curr_traj][1]) &lt; v*1.1) {
        curr_traj++;
        if (curr_traj &gt;= N_P)
            return;
        change_orientation(internalHumX[id-1], internalHumY[id-1], traj[curr_traj][0], traj[curr_traj][1]);
    }
    
    internalHumX[id-1] = internalHumX[id-1] + v*Tpoll*cos(ort*PI/180);
    internalHumY[id-1] = internalHumY[id-1] + v*Tpoll*sin(ort*PI/180);
}


void start_moving() {
    F = 0; 
    t = 0;
    tUpd=0;
    freeWill=0;
    plan_traj();
}
</declaration>
		<location id="id0" x="-815" y="-51">
			<name x="-825" y="-85">h_init</name>
			<committed/>
		</location>
		<location id="id1" x="-620" y="-51" color="#0000ff">
			<name x="-630" y="-85">h_idle</name>
			<label kind="invariant" x="-671" y="-34">t' == 1 
&amp;&amp; tWH' ==0
&amp;&amp; Fp' == 0
&amp;&amp; F' == -Fp*mi*exp(-mi*t)
&amp;&amp; freeWill' == 0
&amp;&amp; tUpd&lt;=Tpoll</label>
		</location>
		<location id="id2" x="-161" y="-178" color="#0000ff">
			<name x="-204" y="-161">h_executing</name>
			<label kind="invariant" x="-221" y="-331">t' == 1 
&amp;&amp; tWH' == p_dext
&amp;&amp; tWH &lt;= tWHTh
&amp;&amp; Fp' == 0
&amp;&amp; F &lt;= passout_th 
&amp;&amp; freeWill' == 0 
&amp;&amp; F' == Fp*lambda*exp(-lambda*t)
&amp;&amp; tUpd&lt;=Tpoll</label>
		</location>
		<location id="id3" x="-161" y="212" color="#0000ff">
			<name x="-171" y="178">h_busy</name>
			<label kind="invariant" x="-272" y="212">t' == 1 
&amp;&amp; tWH' == 0
&amp;&amp; Fp' == 0
&amp;&amp; F &lt;= passout_th 
&amp;&amp; freeWill' == 0 
&amp;&amp; F' == Fp*lambda*exp(-lambda*t)
&amp;&amp; tUpd&lt;=Tpoll</label>
		</location>
		<location id="id4" x="-748" y="-331">
			<committed/>
		</location>
		<location id="id5" x="-620" y="-332">
			<committed/>
		</location>
		<location id="id6" x="170" y="-119">
			<committed/>
		</location>
		<location id="id7" x="170" y="-178">
			<committed/>
		</location>
		<location id="id8" x="153" y="212">
			<committed/>
		</location>
		<location id="id9" x="153" y="297">
			<committed/>
		</location>
		<location id="id10" x="-382" y="-178">
			<urgent/>
		</location>
		<location id="id11" x="-365" y="110">
			<urgent/>
		</location>
		<location id="id12" x="17" y="25" color="#ff0000">
			<name x="7" y="-9">a</name>
			<label kind="invariant" x="68" y="0">t' == 0 &amp;&amp; 
F' == 0 &amp;&amp;
tWH' == 0</label>
			<label kind="exponentialrate" x="42" y="17">1</label>
		</location>
		<location id="id13" x="-510" y="-144">
			<name x="-527" y="-170">c1</name>
			<committed/>
		</location>
		<location id="id14" x="-161" y="51">
			<name x="-152" y="26">c2</name>
			<committed/>
		</location>
		<branchpoint id="id15" x="-161" y="-59">
		</branchpoint>
		<branchpoint id="id16" x="-484" y="-178">
		</branchpoint>
		<init ref="id0"/>
		<transition>
			<source ref="id15"/>
			<target ref="id2"/>
			<label kind="assignment" x="-178" y="-102">hExe=1</label>
			<label kind="probability" x="-178" y="-119">obey</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id3"/>
			<label kind="probability" x="-255" y="51">disobey</label>
			<nail x="-195" y="59"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id14"/>
			<label kind="guard" x="-153" y="76">!served[id-1] 
&amp;&amp; currH == id
&amp;&amp; exeMission</label>
			<label kind="synchronisation" x="-153" y="127">start_h_action?</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id16"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id13"/>
			<label kind="guard" x="-586" y="-127">!served[id-1] 
&amp;&amp; currH == id
&amp;&amp; exeMission</label>
			<label kind="synchronisation" x="-586" y="-76">start_h_action?</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id1"/>
			<label kind="probability" x="-561" y="-195">disobey</label>
			<nail x="-493" y="-178"/>
			<nail x="-578" y="-178"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id10"/>
			<label kind="assignment" x="-467" y="-178">hExe=1</label>
			<label kind="probability" x="-467" y="-195">obey</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-374" y="-110">stop_h_action?</label>
			<label kind="assignment" x="-408" y="-93">t=0, Fp=F, tUpd=0,hExe=0</label>
			<nail x="-246" y="-102"/>
			<nail x="-518" y="-102"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id12"/>
			<nail x="59" y="8"/>
			<nail x="59" y="8"/>
			<nail x="59" y="42"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id12"/>
			<label kind="guard" x="25" y="59">F &gt;= passout_th</label>
			<label kind="synchronisation" x="25" y="76">pass_out!</label>
			<label kind="assignment" x="34" y="93">t = 0</label>
			<nail x="17" y="212"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id12"/>
			<label kind="guard" x="-76" y="-85">F &gt;= passout_th</label>
			<label kind="synchronisation" x="-76" y="-68">pass_out!</label>
			<label kind="assignment" x="-76" y="-51">t = 0, hExe=0</label>
			<nail x="-76" y="-34"/>
			<nail x="17" y="-34"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-603" y="212">!served[id-1] &amp;&amp;
freeWill &gt;= freeWillTh &amp;&amp;
tUpd&gt;=Tpoll</label>
			<label kind="assignment" x="-603" y="263">t = 0, Fp=F, tUpd=0</label>
			<nail x="-620" y="212"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-459" y="-297">!served[id-1] &amp;&amp;
freeWill &gt;= freeWillTh &amp;&amp;
tUpd &gt;= Tpoll</label>
			<label kind="assignment" x="-459" y="-246">t = 0, Fp=F, tUpd=0, hExe=0</label>
			<nail x="-161" y="-220"/>
			<nail x="-595" y="-220"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id3"/>
			<label kind="guard" x="-306" y="127">F==0</label>
			<label kind="assignment" x="-306" y="144">Fp=1</label>
			<nail x="-365" y="144"/>
			<nail x="-212" y="144"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id3"/>
			<label kind="guard" x="-331" y="93">F&gt;0</label>
			<label kind="assignment" x="-297" y="93">Fp = 1-F</label>
			<nail x="-238" y="110"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id11"/>
			<label kind="guard" x="-510" y="59">!served[id-1] 
&amp;&amp; !exeMission</label>
			<label kind="assignment" x="-510" y="93">start_moving()</label>
			<nail x="-527" y="110"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id2"/>
			<label kind="guard" x="-365" y="-127">F==0</label>
			<label kind="assignment" x="-306" y="-127">Fp= 1</label>
			<nail x="-382" y="-136"/>
			<nail x="-263" y="-136"/>
			<nail x="-263" y="-178"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id2"/>
			<label kind="guard" x="-340" y="-195">F&gt;0</label>
			<label kind="assignment" x="-289" y="-195">Fp = 1-F</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id3"/>
			<label kind="guard" x="25" y="255">currH!=id</label>
			<nail x="153" y="255"/>
			<nail x="-161" y="255"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id8"/>
			<label kind="guard" x="-51" y="187">tUpd&gt;=Tpoll</label>
			<label kind="assignment" x="-51" y="136">updateF(-lambda, 1),
updateP(), tUpd=0,
freeWill = random(freeWillRange)</label>
			<nail x="0" y="212"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="25" y="297">publish_m[4]!</label>
			<nail x="-161" y="297"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-442" y="-68">tWH &gt;= tWHTh</label>
			<label kind="assignment" x="-442" y="-51">served[currH-1]= true,
t = 0, exeMission = 0, Fp=F,
 tUpd=0, tWH=0,hExe=0</label>
			<nail x="-229" y="-51"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="178" y="-161">currH==id</label>
			<label kind="synchronisation" x="178" y="-144">publish_m[3]!</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id2"/>
			<label kind="guard" x="68" y="-161">currH!=id</label>
			<nail x="127" y="-144"/>
			<nail x="-102" y="-144"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="59" y="-119">publish_m[4]!</label>
			<nail x="-59" y="-119"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id7"/>
			<label kind="guard" x="51" y="-221">tUpd&gt;=Tpoll
&amp;&amp; tWH &lt; tWHTh</label>
			<label kind="assignment" x="51" y="-272">updateF(-lambda, 1),
tUpd=0,
freeWill = random(freeWillRange)</label>
			<nail x="8" y="-178"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="guard" x="-705" y="-297">tUpd&gt;= Tpoll</label>
			<label kind="assignment" x="-705" y="-280">updateF(-mi, 0), 
tUpd=0, 
freeWill = random(freeWillRange)</label>
			<nail x="-620" y="-187"/>
			<nail x="-620" y="-187"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="guard" x="-714" y="-187">currH!=id</label>
			<nail x="-680" y="-331"/>
			<nail x="-680" y="-212"/>
			<nail x="-680" y="-51"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-850" y="-187">publish_m[4]!</label>
			<nail x="-748" y="-51"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-731" y="-374">currH==id</label>
			<label kind="synchronisation" x="-731" y="-357">publish_m[3]!</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-782" y="-51">initHuman()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="170" y="238">currH==id</label>
			<label kind="synchronisation" x="170" y="255">publish_m[3]!</label>
		</transition>
</template>