	<template>
		<name>Human_Leader</name>
		<parameter>int id, double _v, int p_f, int p_fw, int start_from, int path</parameter>
		<declaration>clock t, F;
clock tUpd;
clock tExp;

double Fp;
double lambda, mi;
const double passout_th = 1.0;

// Errors Model
int obey, disobey;
double freeWillTh;
double fw;
int TE;
double lambda_crit;
double hs, crit, non_crit;

// Fatigue Sharing Parameters
bool DO_START = true;
bool ONCE_FTG = true;
bool ONCE_POS = true;

int v;

// Position Sharing Parameters
bool access() {
    return true;
}

void updateF(double coeff, bool walking) {
    // if two human instances are the same person,
    // residual conditions must be retrieved
    if (ONCE_FTG &amp;&amp; start_from!=-1 &amp;&amp; currH==id) {
        F = internalFatigue[start_from-1];
        Fp = F;
        internalFatigue[id-1] = F;
        ONCE_FTG = false;
    }

    if(walking) {
        internalFatigue[id-1] = 1-(1-internalFatigue[id-1])*exp(coeff*Tpoll);
    } else {
        internalFatigue[id-1] = internalFatigue[id-1]*exp(coeff*Tpoll);
    }

    internalFatigue[id-1] = fmax(0, internalFatigue[id-1]);
}

trajectory traj = **N_P_0.0**
double ort = 0.0;
int curr_traj = 0;

void change_orientation(double sx, double sy, double dx, double dy) {
    double cos_alpha, alpha, theta, delta;
    double AC, AB;
    bool turnLeft, needsTurning = false;

    AC = pt_dist(sx, dx, sy, sy);
    AB = pt_dist(sx, dx, sy, dy);

    if (AB == 0)
    {
        return;
    }

    cos_alpha = AC / AB;
    // angle between destination and hor. line
    alpha = acos(cos_alpha);
    // angle between robot axis and hor. line
    theta = ort * 180 / PI;
    // how much the robot should rotate [deg]
    delta = 0.0;
    turnLeft = false;

    if (dx &gt;= sx &amp;&amp; dy &gt;= sy)
    { // Destination in 1st quadrant
        alpha = alpha * (180 / PI);
        if (alpha &gt; theta)
        {
            delta = alpha - theta;
            turnLeft = true;
        }
        else
        {
            delta = theta - alpha;
            turnLeft = false;
        }
    }
    else if (dx &gt;= sx &amp;&amp; dy &lt;= sy)
    { // Destination in 2nd quadrant
        alpha = -alpha * (180 / PI);
        if (theta &lt; alpha)
        {
            delta = alpha - theta;
            turnLeft = true;
        }
        else
        {
            delta = theta - alpha;
            turnLeft = false;
        }
    }
    else if (dx &lt;= sx &amp;&amp; dy &lt;= sy)
    { // Destination in 3rd quadrant
        alpha = -(180 - alpha * (180 / PI));
        if (theta &lt; alpha)
        {
            delta = alpha - theta;
            turnLeft = true;
        }
        else
        {
            delta = theta - alpha;
            turnLeft = false;
        }
    }
    else if (dx &lt;= sx &amp;&amp; dy &gt;= sy)
    { // Destination in 4th quadrant
        alpha = 180 - alpha * (180 / PI);
        if (theta &lt; alpha)
        {
            delta = alpha - theta;
            turnLeft = true;
        }
        else
        {
            delta = theta - alpha;
            turnLeft = false;
        }
    }

    needsTurning = delta &gt; 0.0;

    if (needsTurning &amp;&amp; turnLeft)
    {
        ort = ort * 180 / PI + delta;
    }
    else if (needsTurning &amp;&amp; !turnLeft)
    {
        ort = ort * 180 / PI - delta;
    }
}

point curr, dest;

void plan_traj() {
    int i, j, next_inters = -1;
    int neigh[**max_neigh**] = **max_neigh_-1**
    int k = 0;
    double dist, min_dist;
    bool visited[N_I] = **N_I_false**
            curr[0] = internalHumX[id-1]; curr[1] = internalHumY[id-1];
    dest[0] = destX[id-1]; dest[1] = destY[id-1];
    // init trajectory
    for (i = 0; i &lt; N_P; i++)
    {
        traj[i][0] = 0.0;
        traj[i][1] = 0.0;
    }
    i = 0;
    curr_traj = 0;

    // builds trajectory by finding a path among adjacent areas
    // (the existence of an intersection point means two areas are adjacent to each other)
    // until the destination area is reached
    while (!same_area(curr[0], curr[1], dest[0], dest[1]))
    {
        for (j = 0; j &lt; N_I; j++)
        {
            // find all int. pts which are a neighbor of curr. point
            // there are max. 3 in the long left hall
            if (same_area(curr[0], curr[1], INTERSECTIONS[j][0], INTERSECTIONS[j][1]) &amp;&amp; !visited[j])
            {
                neigh[k] = j;
                k++;
            }
        }
        if(neigh[0]==-1) return;
        // next int. point to add to traj. is the closest to destination
        min_dist = pt_dist(INTERSECTIONS[neigh[0]][0], dest[0], INTERSECTIONS[neigh[0]][1], dest[1]);
        next_inters = neigh[0];
        for (j = 1; j &lt; **max_neigh** &amp;&amp; neigh[j] != -1; j++)
        {
            dist = pt_dist(INTERSECTIONS[neigh[j]][0], dest[0], INTERSECTIONS[neigh[j]][1], dest[1]);
            if (dist &lt; min_dist)
            {
                min_dist = dist;
                next_inters = neigh[j];
            }
        }
        // if trajectory is full, or no next point has been found,
        // something has gone wrong, but I cannot raise an exception
        if (i == N_P - 1 || next_inters == -1)
            return;
        // next inters point is set as visited,
        visited[next_inters] = true;
        // added to the trajectory,
        traj[i][0] = INTERSECTIONS[next_inters][0];
        traj[i][1] = INTERSECTIONS[next_inters][1];
        i++;
        // and set as current point
        curr[0] = INTERSECTIONS[next_inters][0];
        curr[1] = INTERSECTIONS[next_inters][1];
        // reset
        next_inters = -1;
        k = 0;
        for(j=0; j&lt;**max_neigh**;j++) neigh[j] = -1;
    }
    // destination point is always part of the trajectory
    traj[i][0] = dest[0];
    traj[i][1] = dest[1];

    //sets initial orientation
    change_orientation(internalHumX[id-1], internalHumY[id-1], traj[0][0], traj[0][1]);
}

void start_moving() {
    // same as ONCE_FTG
    if (ONCE_POS &amp;&amp; start_from!=-1) {
        humanPositionX[id-1] = internalHumX[start_from-1];
        humanPositionY[id-1] = internalHumY[start_from-1];
        internalHumX[id-1] = humanPositionX[id-1];
        internalHumY[id-1] = humanPositionY[id-1];
        ONCE_POS = false;
    }

    F = 0;
    t = 0;
    tUpd=0;
    hExe = 1;
    fw=0;
    plan_traj();
    DO_START = false;
}

double dist_to_dest;
double humanRobotDist;
void checkSuccess() {
    dist_to_dest = pt_dist(destX[id-1], internalHumX[id-1], destY[id-1], internalHumY[id-1]);
    humanRobotDist = calculateDistance();
    // when humans reach their destination, they can set themselves as "served"
    if(dist_to_dest &lt;= v*3.0 &amp;&amp; humanRobotDist&lt;=5.0) {
        served[id-1] = true;
    }
}

void updateP() {
    double eps = 0.0;

    if (curr_traj &gt;= N_P || (traj[curr_traj][0]==0.0 &amp;&amp; traj[curr_traj][1]==0.0))
    return;

    if (pt_dist(internalHumX[id-1], traj[curr_traj][0], internalHumY[id-1], traj[curr_traj][1]) &lt; v) {
        curr_traj++;
        if (curr_traj &gt;= N_P)
        return;
        change_orientation(internalHumX[id-1], internalHumY[id-1], traj[curr_traj][0], traj[curr_traj][1]);
    }

    internalHumX[id-1] = internalHumX[id-1] + v*Tpoll*cos(ort*PI/180);
    internalHumY[id-1] = internalHumY[id-1] + v*Tpoll*sin(ort*PI/180);
}

void check_crit(){
     double humanRobotDist = calculateDistance();
     if(currH!=id || served[id-1]) return;
     if(humanRobotDist&lt;=0.5) collisions++;

     if(is_crit) v = fint(_v*0.6);
     else v = fint(_v);
}

double crit_prob;
void update_crit() {
    double dice = random(100);
    crit_prob = 1-exp(-lambda_crit*t);

    if(dice&lt;=crit_prob*100) {
        is_crit = false;
        v = fint(_v);
    }
}

void initHuman() {
    double dist_to_dest;
    ERR_PROF error_profile;

    F = 0;
    Fp = 0;
    t = 0;
    v = fint(_v);

    tUpd = 0;
    if(path==ND) {
        humanPositionX[id - 1] = startX[id-1];
        humanPositionY[id - 1] = startY[id-1];
        dist_to_dest = pt_dist(startX[id-1], destX[id-1], startY[id-1], destY[id-1]);
    } else if(path==1) {
        humanPositionX[id - 1] = startX_alt1[id-1];
        humanPositionY[id - 1] = startY_alt1[id-1];
        dist_to_dest = pt_dist(startX_alt1[id-1], destX_alt1[id-1], startY_alt1[id-1], destY_alt1[id-1]);
    } else {
        humanPositionX[id - 1] = startX_alt2[id-1];
        humanPositionY[id - 1] = startY_alt2[id-1];
        dist_to_dest = pt_dist(startX_alt2[id-1], destX_alt2[id-1], startY_alt2[id-1], destY_alt2[id-1]);
    }

    internalHumX[id-1] = humanPositionX[id-1];
    internalHumY[id-1] = humanPositionY[id-1];

    // unfortunately the switch case is not supported yet
    if(p_f==1) {
        lambda = YOUNG_HEALTHY[0]; mi = YOUNG_HEALTHY[1];
    } else if(p_f==2) {
        lambda = random_normal(YOUNG_SICK[0], YOUNG_SICK_SIGMA[0]);
        mi = random_normal(YOUNG_SICK[1], YOUNG_SICK_SIGMA[1]);
    } else if(p_f==3) {
        lambda = random_normal(ELDERLY_HEALTHY[0], ELDERLY_HEALTHY_SIGMA[0]);
        mi = random_normal(ELDERLY_HEALTHY[1], ELDERLY_HEALTHY_SIGMA[1]);
    } else if(p_f==4) {
        lambda = ELDERLY_SICK[0]; mi = ELDERLY_SICK[1];
    } else if(p_f==5) {
        lambda = COVID_PATIENT[0]; mi = COVID_PATIENT[1];
    } else {
        lambda = 0.005; mi = 0.005; //default values
    }

    error_profile = get_error_params(p_fw);
    obey = error_profile.obey;
    disobey = error_profile.disobey;
    freeWillTh = error_profile.FW_th;
    if(_v&gt;50.0)
        TE = fint(dist_to_dest / v * (error_profile.delta_x100/100));
    else TE = 999;
    lambda_crit = 1/error_profile.lambda_inv;
    hs = error_profile.crit;
    crit = 1.0;
    non_crit = 999.0;
}
    </declaration>
		<location id="id55" x="-476" y="-195">
			<name x="-518" y="-144">idle</name>
			<label kind="invariant" x="-518" y="-178">F' == -Fp*mi*exp(-mi*t)
&amp;&amp; tUpd&lt;=Tpoll</label>
		</location>
		<location id="id56" x="254" y="-221">
			<name x="263" y="-255">busy</name>
			<label kind="invariant" x="263" y="-306">F &lt;= passout_th
&amp;&amp; F' == Fp*lambda*exp(-lambda*t)
&amp;&amp; tUpd&lt;=Tpoll</label>
		</location>
		<location id="id57" x="-680" y="-195">
			<name x="-723" y="-212">Init</name>
			<committed/>
		</location>
		<location id="id58" x="425" y="-221" color="#ff0000">
			<name x="442" y="-238">passed_out</name>
			<label kind="invariant" x="442" y="-221">t' == 0 &amp;&amp;
F' == 0 &amp;&amp;
tExp'==0</label>
			<label kind="exponentialrate" x="417" y="-204">1</label>
		</location>
		<location id="id59" x="255" y="-42">
			<name x="272" y="-42">checking</name>
			<committed/>
		</location>
		<location id="id60" x="-42" y="-272">
			<name x="-52" y="-306">starting</name>
			<urgent/>
		</location>
		<location id="id61" x="-603" y="-425">
			<name x="-663" y="-434">pub_2</name>
			<committed/>
		</location>
		<location id="id62" x="-476" y="-425">
			<name x="-486" y="-459">pub_1</name>
			<committed/>
		</location>
		<location id="id63" x="195" y="-170">
			<name x="170" y="-204">pub_4</name>
			<committed/>
		</location>
		<location id="id64" x="195" y="42">
			<name x="170" y="59">pub_3</name>
			<committed/>
		</location>
		<location id="id65" x="-246" y="-110">
			<name x="-314" y="-136">stopping</name>
			<label kind="invariant" x="-314" y="-153">tExp'==0</label>
		</location>
		<location id="id66" x="-246" y="68">
			<name x="-297" y="85">timeout_detection</name>
			<committed/>
		</location>
		<location id="id67" x="-26" y="68" color="#ff0000">
			<name x="-36" y="34">timer_expired_state</name>
			<label kind="invariant" x="-34" y="102">t' == 0 &amp;&amp;
F' == 0 &amp;&amp;
tExp'==0</label>
			<label kind="exponentialrate" x="-34" y="85">1</label>
		</location>
		<location id="id68" x="449" y="-43" color="#ff0000">
			<name x="459" y="-59">forbidden_area_state</name>
			<label kind="invariant" x="442" y="-110">t' == 0 &amp;&amp;
F' == 0 &amp;&amp;
tExp'==0</label>
			<label kind="exponentialrate" x="501" y="-25">1</label>
		</location>
		<init ref="id57"/>
		<transition color="#ff0000">
			<source ref="id61"/>
			<target ref="id60"/>
			<label kind="guard" x="-289" y="-510">!served[id-1]
&amp;&amp; (fw&gt;=freeWillTh || DO_START)</label>
			<label kind="synchronisation" x="-289" y="-527">start_h_action!</label>
			<label kind="assignment" x="-289" y="-476">start_moving(), tExp=0</label>
			<nail x="-603" y="-476"/>
			<nail x="-187" y="-476"/>
		</transition>
		<transition color="#ff0000">
			<source ref="id55"/>
			<target ref="id60"/>
			<label kind="guard" x="-442" y="-306">!served[id-1] &amp;&amp; currH == id
&amp;&amp; fw&gt;=freeWillTh</label>
			<label kind="synchronisation" x="-425" y="-272">start_h_action!</label>
			<label kind="assignment" x="-425" y="-255">start_moving(), tExp=0</label>
			<nail x="-476" y="-272"/>
		</transition>
		<transition>
			<source ref="id59"/>
			<target ref="id68"/>
			<label kind="guard" x="273" y="-76">!access()</label>
			<label kind="synchronisation" x="273" y="-59">h_fail!</label>
			<label kind="assignment" x="272" y="-25">tExp = 0</label>
		</transition>
		<transition>
			<source ref="id67"/>
			<target ref="id67"/>
			<nail x="34" y="102"/>
			<nail x="34" y="34"/>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id67"/>
			<label kind="synchronisation" x="-161" y="68">h_fail!</label>
			<label kind="assignment" x="-170" y="85">tExp = 0</label>
		</transition>
		<transition color="#ff0000">
			<source ref="id56"/>
			<target ref="id66"/>
			<label kind="guard" x="-34" y="-204">tExp &gt;= TE
&amp;&amp; !served[id-1]</label>
			<nail x="93" y="-178"/>
		</transition>
		<transition color="#ff0000">
			<source ref="id55"/>
			<target ref="id66"/>
			<label kind="guard" x="-527" y="68">tExp &gt;= TE &amp;&amp;
!served[id-1]</label>
			<nail x="-476" y="68"/>
		</transition>
		<transition color="#ff0000">
			<source ref="id59"/>
			<target ref="id65"/>
			<label kind="guard" x="-178" y="-68">access() &amp;&amp;
(served[id-1] ||
fw&gt;=freeWillTh)</label>
			<label kind="synchronisation" x="-34" y="-42">stop_h_action!</label>
			<label kind="assignment" x="-34" y="-25">hExe = 0, Fp = F, tExp=0</label>
			<nail x="-246" y="-42"/>
		</transition>
		<transition>
			<source ref="id65"/>
			<target ref="id55"/>
			<label kind="synchronisation" x="-416" y="-127">r_still?</label>
			<label kind="assignment" x="-416" y="-110">t = 0, tUpd=0,
fw = random(FW_max)</label>
			<nail x="-357" y="-110"/>
		</transition>
		<transition color="#ff0000">
			<source ref="id56"/>
			<target ref="id65"/>
			<label kind="guard" x="-161" y="-161">!served[id-1] &amp;&amp;
fw &gt;= freeWillTh &amp;&amp;
tUpd&lt;=Tpoll</label>
			<label kind="synchronisation" x="-161" y="-110">stop_h_action!</label>
			<label kind="assignment" x="-161" y="-93">hExe = 0, Fp=F, tExp=0</label>
			<nail x="255" y="-110"/>
		</transition>
		<transition>
			<source ref="id62"/>
			<target ref="id55"/>
			<label kind="guard" x="-569" y="-314">currH!=id</label>
			<label kind="assignment" x="-569" y="-340">tExp=0, fw=0</label>
			<nail x="-535" y="-425"/>
			<nail x="-535" y="-238"/>
		</transition>
		<transition>
			<source ref="id63"/>
			<target ref="id56"/>
			<label kind="synchronisation" x="93" y="-153">publish_m[3]!</label>
			<label kind="assignment" x="93" y="-136">tUpd=0, hExe=1,
check_crit(),
update_crit()</label>
		</transition>
		<transition>
			<source ref="id64"/>
			<target ref="id63"/>
			<label kind="synchronisation" x="93" y="-8">publish_m[2]!</label>
		</transition>
		<transition>
			<source ref="id59"/>
			<target ref="id64"/>
			<label kind="guard" x="263" y="17">!served[id-1] &amp;&amp;
fw&lt;freeWillTh &amp;&amp;
access()</label>
			<label kind="assignment" x="263" y="68">updateP(), tExp=0,
updateF(-lambda, 1),
check_crit()</label>
			<nail x="255" y="42"/>
		</transition>
		<transition>
			<source ref="id61"/>
			<target ref="id55"/>
			<label kind="guard" x="-731" y="-391">fw&lt;freeWillTh
&amp;&amp; !DO_START</label>
			<label kind="synchronisation" x="-731" y="-340">publish_m[3]!</label>
			<label kind="assignment" x="-731" y="-323">fw=0</label>
			<nail x="-603" y="-238"/>
		</transition>
		<transition>
			<source ref="id62"/>
			<target ref="id61"/>
			<label kind="guard" x="-586" y="-467">currH==id</label>
			<label kind="synchronisation" x="-586" y="-450">publish_m[2]!</label>
		</transition>
		<transition>
			<source ref="id55"/>
			<target ref="id62"/>
			<label kind="guard" x="-467" y="-408">tUpd&gt;=Tpoll</label>
			<label kind="assignment" x="-467" y="-391">updateF(-mi, 0),
tUpd=0,
fw = random(FW_max)</label>
		</transition>
		<transition>
			<source ref="id60"/>
			<target ref="id56"/>
			<label kind="guard" x="34" y="-238">F==0</label>
			<label kind="assignment" x="85" y="-238">Fp=1</label>
			<nail x="-42" y="-221"/>
		</transition>
		<transition>
			<source ref="id60"/>
			<target ref="id56"/>
			<label kind="guard" x="-17" y="-289">F&gt;0</label>
			<label kind="assignment" x="17" y="-289">Fp=1-F</label>
			<nail x="255" y="-272"/>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id59"/>
			<label kind="guard" x="263" y="-153">tUpd&gt;=Tpoll</label>
			<label kind="assignment" x="263" y="-136">checkSuccess(),
fw = random(FW_max)</label>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id58"/>
			<label kind="guard" x="272" y="-238">F &gt;= passout_th</label>
			<label kind="synchronisation" x="289" y="-221">h_fail!</label>
			<label kind="assignment" x="289" y="-204">t = 0, hExe = 0</label>
		</transition>
		<transition>
			<source ref="id58"/>
			<target ref="id58"/>
			<nail x="400" y="-170"/>
			<nail x="442" y="-170"/>
		</transition>
		<transition>
			<source ref="id57"/>
			<target ref="id55"/>
			<label kind="assignment" x="-654" y="-187">initHuman()</label>
		</transition>
		<transition>
			<source ref="id68"/>
			<target ref="id68"/>
			<label kind="assignment" x="467" y="-17">tExp = 0</label>
			<nail x="552" y="0"/>
			<nail x="552" y="-42"/>
		</transition>
	</template>