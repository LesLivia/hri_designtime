<template>
	<name>ROS_SensPub</name>
	<parameter>int id, double l_avg, double l_dev</parameter>
	<declaration>
clock L;
double latency = 0.0;
int buff_pos = 0;
double buffer[MAX_BUFF_SIZE]; 
double buffer2[MAX_BUFF_SIZE]; 
int buffer3[MAX_BUFF_SIZE];
int cached_id;

void update_lat() {
    latency = random_normal(l_avg, l_dev);
}

void add_to_buffer() {
    cached_id = currH;
    if(id==0){
        buffer[buff_pos] = internal_charge[0];
        buffer3[buff_pos] = 0;
        buff_pos++;
        buffer[buff_pos] = internal_charge[1];
        buffer3[buff_pos] = 1;
    }
    else if(id==3) {
        buffer[buff_pos] = internalHumX[currH-1];
        buffer2[buff_pos] = internalHumY[currH-1];
        buffer3[buff_pos] = -1;
    }
    else if(id==4){
        buffer[buff_pos] = internalFatigue[currH-1];
        buffer3[buff_pos] = -1;
    }
    else {
        //update robot position (currR or coR)
        buffer[buff_pos] = internalRobX[id-1];
        buffer2[buff_pos] = internalRobY[id-1];
    }

    buff_pos += 1;
}

void shift_buffer(){
    int i;

    // Shift buffer
    for(i=0; i&lt;MAX_BUFF_SIZE-1 &amp;&amp; buffer[i+1] &gt; 0.0; i++) {
        buffer[i] = buffer[i+1];
        buffer2[i] = buffer2[i+1];
        buffer3[i] = buffer3[i+1];
    }

    buffer[i+1] = -1.0;
    buffer2[i+1] = -1.0;
    buffer3[i+1] = -1;
    
    buff_pos = buff_pos-1;
    if(buff_pos &lt; 0)
        buff_pos = 0;
}

void publish() {
    int i;

    // Publish
    if(id==0){
        batteryCharge[buffer3[0]] = buffer[0];
        shift_buffer();
        batteryCharge[buffer3[0]] = buffer[0];
    }
    else if(id==3) {
        if(cached_id==currH) {
            for(i=0; i&lt;H &amp;&amp; SAME_H_IDs[currH-1][i]!=-1; i++) {
                humanPositionX[SAME_H_IDs[currH-1][i]-1] = buffer[0];
                humanPositionY[SAME_H_IDs[currH-1][i]-1] = buffer2[0];
            }
        }
    }
    else if(id==4 &amp;&amp; cached_id==currH) {
        humanFatigue[currH-1] = buffer[0];
    }
    else if(id==1 || id ==2) {
        //update robot position (currR or coR)
        robPositionX[id-1] = buffer[0];
        robPositionY[id-1] = buffer2[0];
        /*shift_buffer();
        robPositionX[buffer3[0]] = buffer[0];
        robPositionY[buffer3[0]] = buffer2[0];*/
    }
    
    shift_buffer();
}

</declaration>
		<location id="id152" x="-34" y="-8">
			<name x="-42" y="8">idle</name>
			<label kind="invariant" x="-42" y="25">L'==0</label>
		</location>
		<location id="id153" x="-34" y="-195">
			<name x="-17" y="-204">sending</name>
			<label kind="invariant" x="-17" y="-187">L &lt;= latency</label>
		</location>
		<init ref="id152"/>
		<transition>
			<source ref="id153"/>
			<target ref="id153"/>
			<label kind="synchronisation" x="-8" y="-289">publish_m[id]?</label>
			<label kind="assignment" x="17" y="-272">add_to_buffer()</label>
			<nail x="-34" y="-280"/>
			<nail x="34" y="-246"/>
		</transition>
		<transition>
			<source ref="id153"/>
			<target ref="id153"/>
			<label kind="guard" x="-153" y="-314">L&gt;=latency 
&amp;&amp; buff_pos&gt;1</label>
			<label kind="assignment" x="-178" y="-280">publish(), 
update_lat(),
L=0</label>
			<nail x="-34" y="-280"/>
			<nail x="-102" y="-238"/>
		</transition>
		<transition>
			<source ref="id153"/>
			<target ref="id152"/>
			<label kind="guard" x="-204" y="-144">L&gt;=latency 
&amp;&amp; buff_pos&lt;=1</label>
			<label kind="assignment" x="-153" y="-93">publish()</label>
			<nail x="-93" y="-102"/>
		</transition>
		<transition>
			<source ref="id152"/>
			<target ref="id153"/>
			<label kind="synchronisation" x="34" y="-127">publish_m[id]?</label>
			<label kind="assignment" x="34" y="-110">add_to_buffer(),
L=0, update_lat()</label>
			<nail x="34" y="-102"/>
		</transition>
</template>